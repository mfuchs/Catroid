/*
 * Catroid: An on-device visual programming system for Android devices
 * Copyright (C) 2010-2017 The Catrobat Team
 * (<http://developer.catrobat.org/credits>)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * An additional term exception under section 7 of the GNU Affero
 * General Public License, version 3, is available at
 * http://developer.catrobat.org/license_additional_term
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import groovy.json.StringEscapeUtils
import groovy.xml.XmlUtil
import groovy.xml.StreamingMarkupBuilder
import java.nio.file.Paths
import java.util.zip.ZipFile

ext {

    assetsPath = "src/main/assets/"
    standaloneZipPath = assetsPath + "project.zip"
    standaloneTmpPath = assetsPath + "standalone/"

    manifestPath = "src/main/AndroidManifest.xml"
    resPath = "src/main/res/drawable-nodpi"
    googleServicesJsonPath = "google-services.json"

    buildStandaloneInfoTmpPath = "buildStandaloneInfoTmp"
    projectId = "genterated824"
    projectName = 'Pythagorean Theorem'
    manifestAppName = '' // TODO make this happen
    appZipFile = null
    appZipFileInAssets = null
}

class StandalonePreparation
{
    private def ext
    private String downloadUrl
    private String projectPath

    StandalonePreparation(String id, String downloadUrl, def project) {
        this.ext = project.ext
        this.ext.projectId = id
        this.downloadUrl = downloadUrl
        this.projectPath = project.projectDir.absolutePath

        File appsCache = new File("${project.rootDir.absolutePath}/.apps")
        appsCache.mkdirs()
        this.ext.appZipFile = new File("${appsCache.absolutePath}/${ext.projectId}.zip")
    }

    void execute() {
        println "Preparing for the Standalone app '$ext.projectId'."
        download()
        determineProjectName()
    }

    private void download() {
        if (ext.appZipFile.exists()) {
            println "Using already downloaded app at '$ext.appZipFile.absolutePath'."
            return
        }
        println "Downloading... " + downloadUrl
        ext.appZipFile.withOutputStream {
            it << new URL(downloadUrl).content
        }
        println "Downloaded to: " + ext.appZipFile.absolutePath
    }

    private void determineProjectName() {
        def zipFile = new ZipFile(ext.appZipFile)
        def codeXmlEntry = zipFile.getEntry('code.xml')
        String codeXmlContents = zipFile.getInputStream(codeXmlEntry).text
        codeXmlContents = codeXmlContents.replaceAll("&#x0;", "") // no \0 characters are allowed in xml
        def programNode = new XmlSlurper().parseText(codeXmlContents)
        String programName = programNode.header.programName.text()

        ext.manifestAppName = escapeXml(programName)
        ext.projectName = escapeJava(programName)
    }

    private String escapeXml(String text) {
        XmlUtil.escapeXml(text)
    }

    private String escapeJava(String text) {
        StringEscapeUtils.escapeJava(text)
    }
}

task standalonePreparation() {
    /*
     * Configuration
     *
     * Do the downloading of the APP _before_ the configuration.
     * This is to ensure that the variables like the application name are
     * already present when the configuration step comes to the android extension.
     */
    if (project.hasProperty("download")) {
        new StandalonePreparation(project["suffix"], project["download"], project).execute()
    }

    /*
     * Actual task
     */
    doLast {
        copy {
            from project.ext.appZipFile
            into project.ext.assetsPath
        }
        project.ext.appZipFileInAssets = file("$project.ext.assetsPath/${project.ext.projectId}.zip")
        ZipFile app = new ZipFile(project.ext.appZipFileInAssets)

        adaptManifest(file(project.ext.manifestPath), project.ext.manifestAppName)
        removeUnecessaryPermissions(app)
        adaptGoogleServices(file(project.ext.googleServicesJsonPath), project.ext.projectId)
        copyScreenshotAsIcon(app)
    }
}

task standaloneCleanup() {
    doLast {
        delete project.ext.appZipFileInAssets
    }
}

def adaptManifest(File manifest, String appName) {
    def text = manifest.text
    text = text.replaceAll("@string/app_name", appName);
    text = text.replaceAll("@drawable/ic_launcher", "@drawable/icon");
    manifest.write(text)
}

def adaptGoogleServices(File googleServices, String projectId) {
    def text = googleServices.text

    // Clean up first to ensure that org.catrobat.catroid.abc does not become org.catrobat.abc.abc after two runs
    def oldName = 'org.catrobat.catroid'
    def newName = "org.catrobat.catroid.${projectId}"
    text = text.replaceAll(newName, oldName)

    // now change it
    text = text.replaceAll(oldName, newName)
    googleServices.write(text)
}

task assembleDebugTest(dependsOn: ':assembleCatroidDebugTest') << {}
task commandlineAdbInstallDebug(dependsOn: ':commandlineAdbInstallCatroidDebug') << {}
task commandlineAdbInstallDebugTest(dependsOn: 'commandlineAdbInstallCatroidDebugTest') << {}

task testremoveIntentFilters() << {
    messUpIntentFilters()
}

def removeUnecessaryPermissions(ZipFile appZipFile) {
    println 'Managing Permissions.'

    def permissionsEntry = appZipFile.getEntry('permissions.txt')
    if (!permissionsEntry || permissionsEntry.isDirectory()) {
        println 'No permissions.txt file found in the app.'
        return
    }
    def permissionsText = appZipFile.getInputStream(permissionsEntry).text

    File manifestFile = file(project.ext.manifestPath);
    def manifestText = manifestFile.text;
    def manifestXml = new XmlSlurper().parseText(manifestText)

    def permissionsToRemove = []
    def featuresToRemove = []

    if((!permissionsText.contains("BLUETOOTH_LEGO_NXT")) && (!permissionsText.contains("BLUETOOTH_PHIRO_PRO"))){
        permissionsToRemove.add('android.permission.BLUETOOTH_ADMIN')
        permissionsToRemove.add('android.permission.BLUETOOTH')
        permissionsToRemove.add('android.permission.USE_CREDENTIALS')

        featuresToRemove.add('android.hardware.bluetooth')
    }

    if(!permissionsText.contains("ARDRONE_SUPPORT")){
        permissionsToRemove.add('android.permission.CHANGE_WIFI_MULTICAST_STATE')
        permissionsToRemove.add('android.permission.CHANGE_WIFI_STATE')
        permissionsToRemove.add('android.permission.ACCESS_WIFI_STATE')

        featuresToRemove.add('android.hardware.wifi')
    }

    if((!permissionsText.contains("CAMERA_FLASH")) && (!permissionsText.contains("FACE_DETECTION"))){
        permissionsToRemove.add('android.permission.CAMERA')

        featuresToRemove.add('android.hardware.camera')
    }

    if(!permissionsText.contains("VIBRATOR")){
        permissionsToRemove.add('android.permission.VIBRATE')
    }

    manifestXml."uses-permission".findAll {
        permissionsToRemove.indexOf(it."@android:name") != -1
    }*.replaceNode{}

    manifestXml."uses-feature".findAll {
        featuresToRemove.indexOf(it."@android:name") != -1
    }*.replaceNode{}

    manifestText = XmlUtil.serialize(new StreamingMarkupBuilder().bind{ mkp.yield manifestXml})

    manifestFile.write(manifestText)
}

def copyScreenshotAsIcon(ZipFile appZipFile) {
    def screenshotBytes = loadScreenshotBytes(appZipFile)
    if (!screenshotBytes) {
        println 'Could not find a screenshot.'
        return
    }

    File icon = file("$project.ext.resPath/icon.png")
    icon.setBytes(screenshotBytes)
}

def loadScreenshotBytes(ZipFile zip) {
    def pngMagicNumber = [-119, 80, 78, 71, 13, 10, 26, 10]
    def validNames = ['manual_screenshot.png', 'automatic_screenshot.png']
    def screenshots = zip.entries().grep { !it.directory }
                                   .grep { entry -> validNames.any { it == entry.name || entry.name.endsWith("/$it") } }
                                   .toSorted { validNames.indexOf(it.name) }

    for (def entry : screenshots) {
        def bytes = zip.getInputStream(entry).bytes
        if (bytes[0..7] == pngMagicNumber) {
            println "Found screenshot at '$entry.name'."
            return bytes
        }
    }

    return null
}

def messUpIntentFilters() {
    File manifestFile = file(project.ext.manifestPath);
    def manifestText = manifestFile.text

    String regex = "<intent-filter>\\n.+?<action android:name=\"android.intent.action.(VIEW|GET_CONTENT)(.|\\n)+?</intent-filter>"
    String noIntentManifest = manifestText.replaceAll(regex, "")
    manifestFile.write(noIntentManifest)
}

/*
 * Ensure that the assembleStandaloneDebug task does the correct preparation
 * and clean-up steps necessary for standalone APK creation.
 */
tasks.whenTaskAdded { task ->
    if (task.name == 'preStandaloneDebugBuild') {
        task.dependsOn 'standalonePreparation'
    } else if (task.name == 'assembleStandaloneDebug') {
        task.finalizedBy 'standaloneCleanup'
    }
}
