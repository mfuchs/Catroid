#!groovy

pipeline {
    agent {
        dockerfile {
            filename 'Dockerfile.jenkins'
            // 'docker build' would normally copy the whole build-dir to the container, changing the
            // docker build directory avoids that overhead
            dir 'docker'
            // Pass the uid and the gid of the current user (jenkins-user) to the Dockerfile, so a
            // corresponding user can be added. This is needed to provide the jenkins user inside
            // the container for the ssh-agent to work.
            // Another way would be to simply map the passwd file, but would spoil additional information
            // Also hand in the group id of kvm to allow using /dev/kvm.
            additionalBuildArgs '--build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g) --build-arg KVM_GROUP_ID=$(getent group kvm | cut -d: -f3)'
            args '--device /dev/kvm:/dev/kvm -v /var/local/container_shared/gradle_cache/$EXECUTOR_NUMBER:/home/user/.gradle -m=6.5G'
            label 'LimitedEmulator'
        }
    }

    options {
        timeout(time: 6, unit: 'HOURS')
        timestamps()
    }

    stages {
        stage('Prepare build') {
            steps {
                script {
                    currentBuild.displayName = "#${env.BUILD_NUMBER}"
                }
            }
        }

        stage('Setup Translations') {
            steps {
                sh '''
                    set +x
                    ./gradlew generateCrowdinMetadataCatroid -PcrowdinKey=$crowdinKey
                '''
            }
        }

        stage('Start emulator') {
            steps {
                sh './gradlew -Pemulator=android24 startEmulator'
            }
        }

        stage('Create Screenshots') {
            steps {
                sh "./gradlew generateScreenshotsCatroid"
            }
            post {
                always {
                    sh './gradlew stopEmulator'
                }

                success {
                    publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: 'fastlane/metadata/android',
                    reportFiles: 'screenshots.html',
                    reportName: 'Screenshots'
                    ]
                }
            }
        }

        stage('Review') {
            //agent none
            options {
                timeout(time: 6, unit: 'HOURS')
            }
            steps {
                script {
                    env.APPROVE_DEPLOY = input message: 'User input required',
                        parameters: [choice(name: 'Deploy', choices: 'no\nyes',
                        description: 'Please review the Screenshots! Do you want to deploy this to Google Play?')]
                }
            }
        }

        stage('Upload Metadata') {
            when {
                environment name: 'APPROVE_DEPLOY', value: 'yes'
            }
            steps {
                sh "fastlane android upload_Metadata_Catroid"
            }
        }

        stage('Promote APK to production') {
            when {
                environment name: 'APPROVE_DEPLOY', value: 'yes'
            }
            steps {
                sh "fastlane android promote_Catroid"
            }
        }
    }

    post {
        changed {
            notifyChat()
        }
    }
}
